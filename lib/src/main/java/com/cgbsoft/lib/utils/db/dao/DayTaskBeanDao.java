package com.cgbsoft.lib.utils.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cgbsoft.privatefund.bean.commui.DayTaskBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAY_TASK_BEAN".
*/
public class DayTaskBeanDao extends AbstractDao<DayTaskBean, Long> {

    public static final String TABLENAME = "DAY_TASK_BEAN";

    /**
     * Properties of entity DayTaskBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskName = new Property(1, String.class, "taskName", false, "TASK_NAME");
        public final static Property CreateDate = new Property(2, String.class, "createDate", false, "CREATE_DATE");
        public final static Property TaskType = new Property(3, int.class, "taskType", false, "TASK_TYPE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property CoinNum = new Property(6, int.class, "coinNum", false, "COIN_NUM");
        public final static Property ResetDay = new Property(7, String.class, "resetDay", false, "RESET_DAY");
        public final static Property AdviserId = new Property(8, String.class, "adviserId", false, "ADVISER_ID");
        public final static Property State = new Property(9, int.class, "state", false, "STATE");
    }


    public DayTaskBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DayTaskBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAY_TASK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TASK_NAME\" TEXT," + // 1: taskName
                "\"CREATE_DATE\" TEXT," + // 2: createDate
                "\"TASK_TYPE\" INTEGER NOT NULL ," + // 3: taskType
                "\"CONTENT\" TEXT," + // 4: content
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"COIN_NUM\" INTEGER NOT NULL ," + // 6: coinNum
                "\"RESET_DAY\" TEXT," + // 7: resetDay
                "\"ADVISER_ID\" TEXT," + // 8: adviserId
                "\"STATE\" INTEGER NOT NULL );"); // 9: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAY_TASK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DayTaskBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(2, taskName);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(3, createDate);
        }
        stmt.bindLong(4, entity.getTaskType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getCoinNum());
 
        String resetDay = entity.getResetDay();
        if (resetDay != null) {
            stmt.bindString(8, resetDay);
        }
 
        String adviserId = entity.getAdviserId();
        if (adviserId != null) {
            stmt.bindString(9, adviserId);
        }
        stmt.bindLong(10, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DayTaskBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(2, taskName);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(3, createDate);
        }
        stmt.bindLong(4, entity.getTaskType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getCoinNum());
 
        String resetDay = entity.getResetDay();
        if (resetDay != null) {
            stmt.bindString(8, resetDay);
        }
 
        String adviserId = entity.getAdviserId();
        if (adviserId != null) {
            stmt.bindString(9, adviserId);
        }
        stmt.bindLong(10, entity.getState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DayTaskBean readEntity(Cursor cursor, int offset) {
        DayTaskBean entity = new DayTaskBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createDate
            cursor.getInt(offset + 3), // taskType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.getInt(offset + 5), // status
            cursor.getInt(offset + 6), // coinNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // resetDay
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // adviserId
            cursor.getInt(offset + 9) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DayTaskBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaskType(cursor.getInt(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setCoinNum(cursor.getInt(offset + 6));
        entity.setResetDay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAdviserId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setState(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DayTaskBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DayTaskBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DayTaskBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
